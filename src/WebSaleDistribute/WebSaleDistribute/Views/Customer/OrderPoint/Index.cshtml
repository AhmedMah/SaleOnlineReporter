
@using WebSaleDistribute.Core
@using WebSaleDistribute.Core.Enums
@model  List<WebSaleDistribute.Models.OrderPointViewModels>


<div class="row" style="padding: 10px;">

    <div class="col-md-12" style="display: inline-flex;">
        <button type="button" id="btnSubmitOrderPoint" class="btn btn-primary">
            مختصات درخواست ها
        </button>
        <div class="input-group">
            <a id="officerEmployeesSelected" class="btn btn-default dropdown-toggle btn-select" data-toggle="dropdown" href="#">انتخاب فروشنده<span class="caret"></span></a>
            <ul id="officerEmployees" class="dropdown-menu"></ul>
        </div><!-- /input-group -->

        <div >@Html.PersianFromToDatePickerItem("orderFromDate", "orderToDate", false, DataPlacement.Bottom)</div>
    </div><!-- /.col-lg-6 -->

</div><!-- /.row -->


<div style="display:flex; justify-content: space-between;  width:100%; height:80vh">
    <div style="width:70%; height: 85%; padding: 8px;" >
        <div id="map_canvas" style="width:100%; height: 74vh; border-right: 1px dashed red;   "  ></div>
        <div class="row" id="customerCommit" style="padding: 5px; width: 100%; height: 5vh; border-top: 1px dashed red">
            <div class="col-xs-4">

            </div>
            <div class="col-xs-4">
                <div class="btn btn-danger">
                    <span id="spanEndTime" class="badge">4</span>   زمان پایان
                </div>
            </div>
            <div class="col-xs-4">
                <div class="btn btn-success">
                    <span id="spanStartTime" class="badge">4</span>   زمان شروع
                </div>
            </div>

        </div>
    </div>

    <div style="width: 30%; height: 100%;">
        <div id="pathInfo" class="alert-info" style="direction: rtl; padding: 4px">
        </div>
        <div id="customerDiv" style="overflow-y: scroll; height: 91%;">
        </div>
    </div>


</div>

@section scripts
{
    <script>

        var customerData;
        var map;
        var bounds;
        var markers = [];
        var table;
        $(document).ready(function() {
            $.get("../General/GetOfficerEmployees/" + @ViewBag.UserName, function(data) {
                var li = "";
                $("#officerEmployees").html("");
                $.each(data, function(key, value) {
                    li = "<li class=\"liOfficerEmployees\" value='" + value.EmployeeID + "'><a href=\"#\">" + value.EmployeeName + "</a></li>";
                    $("#officerEmployees").append(li);
                });
                $(".liOfficerEmployees").click(liOfficerEmployeesClick);
                $("#customerCommit").hide();
 
            });
        });
        var liOfficerEmployeesClick = function() {
            var selText = $(this).text();
            var selValue = $(this).val();
            $("#officerEmployeesSelected").html(selText + ' <span class="caret"></span>');
            $("#officerEmployeesSelected").val(selValue);
        };

        $('#btnSubmitOrderPoint').click(function (e) {
            $("#customerCommit").show();
            e.preventDefault(); // <------------------ stop default behaviour of button
            setMapOnAll(null);
            if ($("#officerEmployeesSelected").val()==="") {
                toastr.error("فروشنده باید انتخاب شود.");
            } else {
                $.get("../General/GetVisitorOrder/" + $("#officerEmployeesSelected").val()+"/"+GetDateTime("orderFromDate")+"/"+GetDateTime("orderToDate"), function(data) {
                    customerData = data;
                    bounds = new google.maps.LatLngBounds();
                    $.each(data, function(i, item) {
                        if (item.Status !== 0) {
                            addMarkerToMap(item);
                        }
                    });
                    if (data[0]) {
                       
                        $("#spanEndTime").html(data[data.length-1].OrderDate);
                        $("#spanStartTime").html(data[0].OrderDate);
                    }
                  
                });
                $.get("../Customer/GetVisitorOrder?employeeId=" + $("#officerEmployeesSelected").val()+"&orderFromDate="+GetDateTime("orderFromDate")+"&orderToDate="+GetDateTime("orderToDate"), function(data) {
                    $('#customerDiv').html(data);
                   
                    $("tr.grid-row").click(function(e) {
                        $("tr.grid-row").removeClass('alert alert-success');
                        $(this).addClass('alert alert-success');
                        var customerId = $($($(this)[0]).find("td")[1]).html();
                        $.each(customerData, function(ix, item) {
                            if (item.CustomerID === parseInt(customerId)   ) {
                                for (var i = 0; i < markers.length; i++) {
                                    if (customerId === markers[i].item.CustomerID.toString()) {
                                        markers[i].setIcon("../images/map_marker_blue.png");
                                        map.panTo(markers[i].position);
                                    } else {
                                        markers[i].setIcon("../images/map_marker_pink.png");
                                    }
                                }
                            }
                        });
                    
                    });
                });
            }
           
        });

      
        function initMap() {

            // Google has tweaked their interface somewhat - this tells the api to use that new UI
            google.maps.visualRefresh = true;
            var Tunisie = new google.maps.LatLng(@ViewBag.Latitude, @ViewBag.Longitude);

            // These are options that set initial zoom level, where the map is centered globally to start, and the type of map to show
            var mapOptions = {
                zoom: 8,
                center: Tunisie,
                mapTypeId: google.maps.MapTypeId.G_NORMAL_MAP
            };
            map = new google.maps.Map(document.getElementById("map_canvas"), mapOptions);
            bounds = new google.maps.LatLngBounds();
            // This makes the div with id "map_canvas" a google map
            // a sample list of JSON encoded data of places to visit in Tunisia
        }

        var addMarkerToMap=function(item) {
            var marker = new google.maps.Marker({
                'position': new google.maps.LatLng(item.Latitude, item.Longitude),
                'map': map,
                'id':item.CustomerID,
                'title': item.PersonName,
                'item':item
            });
            bounds.extend( marker.getPosition() );
            marker.setIcon("../images/map_marker_pink.png");
            var infowindow = new google.maps.InfoWindow({
                content: "<div  dir='rtl'class='infoDiv'>" +
                    "<h4>ترتیب ارسال درخواست :" + item.RowNumber + "</h4>" +
                    "<h4>نام مشتری :" + item.PersonName + "</h4>" +
                    "<h5>کد مشتری :" + item.CustomerID + "</h5>" +
                    "<h5> تاریخ و زمان :" + item.OrderDate + "</h5>" +
                    "<h5>وضعیت gps :" + item.GPSStatus + "</h5>" +
                    "<h5> وضعیت باطری :" + item.BatteryStatus + "</h5>" +
                    "<h5> دقت :" + item.Accuracy + "</h5>" +
                    "</div></div>"
            });
            google.maps.event.addListener(marker, 'click', function () {
                infowindow.open(map, marker);
            });
            markers.push(marker);
            map.fitBounds(bounds);
        }

        function setMapOnAll(map) {
            for (var i = 0; i < markers.length; i++) {
                markers[i].setMap(map);
            }
        }

    </script>

    <script async defer src="https://maps.googleapis.com/maps/api/js?key=AIzaSyC0_QXewKjAZmoTitLsdZfJKb0ytRwjsBQ&callback=initMap"
            type="text/javascript"></script>
}


